_min_copier_version: "7.1.0"
_subdirectory: template
_jinja_extensions:
  - jinja2_time.TimeExtension

kind:
  type: str
  help: What is your extension kind?
  default: frontend
  choices:
    - frontend
    - mimerenderer
    - frontend-and-server
    - theme

author_name:
  type: str
  help: Extension author name
  placeholder: "My Name"
  validator: >-
    {% if not (author_name | regex_search('^[^\s].*$')) %}
    author_name cannot be empty nor start with a blank character.
    {% endif %}

author_email:
  type: str
  help: Extension author email
  default: ""
  placeholder: "me@test.com"
  # Allow empty email or test it against regex
  validator: >-
    {% if author_email and not (author_email | regex_search('^[a-zA-Z0-9.!#$%&’*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\.[a-zA-Z0-9-]+)*$')) %}
    author_email must be a valid email address.
    {% endif %}

labextension_name:
  type: str
  help: JavaScript package name
  default: "{% if kind == 'theme' %}mytheme{% else %}myextension{% endif %}"

python_name:
  type: str
  help: Python package name
  default: "{{ labextension_name | replace('-', '_') | replace('/', '_') | trim('@') }}"

project_short_description:
  type: str
  help: Extension short description
  default: "A JupyterLab extension."

has_settings:
  when: "{{ kind != 'mimerenderer' }}"
  type: bool
  help: Does the extension have user settings or schema-defined UI elements?
  default: no

has_binder:
  type: bool
  help: Do you want to set up Binder example?
  default: no

test:
  type: bool
  help: Do you want to set up tests for the extension?
  default: yes

has_ai_rules:
  type: bool
  help: Include AI assistant rules (AGENTS.md) for coding standards?
  default: no

create_claude_symlink:
  when: "{{ has_ai_rules }}"
  type: bool
  help: Create CLAUDE.md symlink for Claude Code compatibility?
  default: yes

create_gemini_symlink:
  when: "{{ has_ai_rules }}"
  type: bool
  help: Create GEMINI.md symlink for Gemini Code Assist compatibility?
  default: yes

repository:
  type: str
  help: Git remote repository URL
  placeholder: https://github.com/github_username/my-extension

viewer_name:
  when: "{{ kind == 'mimerenderer' }}"
  type: str
  help: What is the MIME type viewer name?
  default: ""
  placeholder: My Viewer

mimetype:
  when: "{{ kind == 'mimerenderer' }}"
  type: str
  help: MIME type
  default: ""
  placeholder: "application/vnd.my_organization.my_type"

mimetype_name:
  when: "{{ kind == 'mimerenderer' }}"
  type: str
  help: MIME type name
  default: ""
  placeholder: my_type

file_extension:
  when: "{{ kind == 'mimerenderer' }}"
  type: str
  help: MIME type file extension
  default: ""
  placeholder: .my_type

data_format:
  when: "{{ kind == 'mimerenderer' }}"
  type: str
  help: MIME type content format
  choices:
    - string
    - json
  default: string

_tasks:
  # Create CLAUDE.md symlink if requested
  - command: |
      {% if has_ai_rules and create_claude_symlink %}
      python -c "import os, sys; os.symlink('AGENTS.md', 'CLAUDE.md') if not os.path.exists('CLAUDE.md') else None; print('✓ Created CLAUDE.md → AGENTS.md symlink')"
      {% else %}
      python -c "print('ℹ Skipping CLAUDE.md symlink creation')"
      {% endif %}
    when: "{{ has_ai_rules }}"
  # Create GEMINI.md symlink if requested
  - command: |
      {% if has_ai_rules and create_gemini_symlink %}
      python -c "import os, sys; os.symlink('AGENTS.md', 'GEMINI.md') if not os.path.exists('GEMINI.md') else None; print('✓ Created GEMINI.md → AGENTS.md symlink')"
      {% else %}
      python -c "print('ℹ Skipping GEMINI.md symlink creation')"
      {% endif %}
    when: "{{ has_ai_rules }}"
