#!/usr/bin/env python
# This script initialize your repository and development environment.
# You can re-execute it at any time

import json
import os
from pathlib import Path
from shutil import which
from subprocess import CalledProcessError, PIPE, check_call, check_output, run


# Git error looked for to determined if the extension folder is already using Git
NOT_GIT_REPO = "fatal: not a git repository (or any of the parent directories): .git"
# Conda development environment name; defined by the environment variable CONDA_ENVIRONMENT_NAME and default to the 'python package name_dev'
ENVIRONMENT_NAME = os.environ.get("CONDA_ENVIRONMENT_NAME", "{{ python_name }}_dev")
# Conda development environment specification; defined the environment variable CONDA_ENVIRONMENT_FILE and default to 'environment.yml'
ENVIRONMENT_FILE = os.environ.get("CONDA_ENVIRONMENT_FILE", "environment.yml")


def initialize_git_repository():
    """Initialize git repository.
    
    The git repository is initialized with the default branch 'main'
    """
    git_status = run(["git", "status"], stdout=PIPE, stderr=PIPE, encoding="utf-8")
    if git_status.returncode > 0 and git_status.stderr.strip() == NOT_GIT_REPO:
        print("\nInitializing git...")
        try:
            check_call(["git", "init"])
            check_call(["git", "branch", "-m", "main"])
        except CalledProcessError as e:
            print(f"Failed to initialize git repository:\n{e!s}\n")
        else:
            print("Git initialized with default branch 'main' for the extension\n")

{% if venv == "conda" %}
def create_conda_environment():
    """Create a development Conda environment.
    
    The default environment name is defined by the constant ENVIRONMENT_NAME
    The environment specification are defined in ENVIRONMENT_FILE (see the
    documentation for more information https://docs.conda.io/projects/conda/en/latest/user-guide/tasks/manage-environments.html#creating-an-environment-from-an-environment-yml-file)

    It will use 'mamba' instead of 'conda' if it is found.
    """
    mamba = which("mamba")
    conda_exe = "mamba" if mamba is not None else "conda"

    print("\nCreating conda environment...")
    try:        
        output = check_output([conda_exe, "env", "list", "--json"], encoding="utf-8")
        envs = json.loads(output)["envs"]
        # if environment exists
        command = "update" if conda_exe == "mamba" or any(map(lambda e: Path(e).name == ENVIRONMENT_NAME, envs)) else "create"
        check_call([conda_exe, "env", command, "--name", ENVIRONMENT_NAME, "--file", ENVIRONMENT_FILE])
    except CalledProcessError as e:
        print(f"Fail to create development environment using '{conda_exe}':\n{e!s}\n")
    else:
        print(f"Conda environment '{ENVIRONMENT_NAME}' {command}d. Execute '{conda_exe} activate {ENVIRONMENT_NAME}' to use it.\n")

{% endif %}
def install_extension():
    """Install the extension in development mode{% if venv == "conda" %} in the conda environment.
    """
    mamba = which("mamba")
    conda_exe = "mamba" if mamba is not None else "conda"
    pre_command = [conda_exe, "run", "--name", ENVIRONMENT_NAME]
{% else %}
    """
    pre_command = []
    # Checking nodeJS is available
    try:
        output = check_output(["node", "--version"], encoding="utf-8")
    except CalledProcessError as e:
        print("You must install nodeJS LTS to develop Jupyter extension; see https://nodejs.org")
        return

    if "CI" not in os.environ:
        # Don't prompt on CI
        answer = input("Do you want to install the extension in development mode?\ny/N: ")
        if not answer.lower().startswith('y'):
            return
{% endif %}
    if os.environ.get("COPIER_SKIP_INSTALL_TASK", "0") != "0":
        print("Skipping installation task")
        return

    print("\nInstalling the extension in development mode...")

    # Force uninstalling the extension to avoid trouble when installing in dev mode
    run(pre_command + ["pip", "uninstall", "--yes", "{{ python_name }}"], stdout=PIPE, stderr=PIPE)

    try:
        # Install package in development mode
        check_output(pre_command + ["pip", "install", "-e", ".[dev{% if test and kind.lower() == 'server' %}, test{% endif %}]"])
        # Link your development version of the extension with JupyterLab
        check_output(pre_command + ["jupyter", "labextension", "develop", ".", "--overwrite"]){% if kind.lower() == 'server' %}
        # Server extension must be manually installed in develop mode
        check_output(pre_command + ["jupyter", "server", "extension", "enable", "{{ python_name }}"]){% endif %}
    except CalledProcessError as e:
        print(f"Fail to install the extension in development mode:\n{e!s}\n")
    else:
        print("Extension installed in development mode.\n")


if __name__ == "__main__":
    initialize_git_repository(){% if venv == "conda" %}
    create_conda_environment(){% endif %}
    install_extension()
